===================================================================================================
Basic
===================================================================================================

function test() {
    foo.bar = 1;
    foo.Bar();
    {
        delete actors[i];
        return;
        return Value();
        continue;
        break;
    };
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
      (expr_stmt
        (assign_op_expr
          left: (member_access_expr
            accessor: (ident)
            member: (ident))
          op: (assign_op_direct)
          right: (literal_int)))
      (expr_stmt
        (func_call_expr
          func: (member_access_expr
            accessor: (ident)
            member: (ident))))
      (compound_stmt
        (delete_stmt
          (array_expr
            accessor: (ident)
            index: (ident)))
        (return_stmt)
        (return_stmt
          (func_call_expr
            func: (ident)))
        (continue_stmt)
        (break_stmt))
      (nop))))




===================================================================================================
Var declaration
===================================================================================================

function test() {
    var item : SItemUniqueId;
    var maxTox, toxicityOffset, adrenaline : float;
    var atts    : array<name>;
    var duration : float = 0.f;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
      (local_var_decl_stmt
        names: (ident)
        var_type: (type_annot
          type_name: (ident)))
      (local_var_decl_stmt
        names: (ident)
        names: (ident)
        names: (ident)
        var_type: (type_annot
          type_name: (ident)))
      (local_var_decl_stmt
        names: (ident)
        var_type: (type_annot
          type_name: (ident)
          type_arg: (type_annot
            type_name: (ident))))
      (local_var_decl_stmt
        names: (ident)
        var_type: (type_annot
          type_name: (ident))
        init_value: (literal_float)))))




===================================================================================================
Conditionals - if
===================================================================================================

function test() {
    if ( id1 == id2 && id3 )
    {
        if ( this.method() )
            func('baz');
        
        func();
        
        if ( !id )
        {
            func();   
        }
        else if (id1 != id2 )
        {
            if ( func1( func2(), this.id ) ); // <- NOP here
                doAnyways();
        }
        else
        {
            id1 += 0;
        }
    }
    else if ( true )
    {
        id = !id;
    }
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
      (if_stmt
        cond: (binary_op_expr
          left: (binary_op_expr
            left: (ident)
            op: (binary_op_eq)
            right: (ident))
          op: (binary_op_and)
          right: (ident))
        body: (compound_stmt
          (if_stmt
            cond: (func_call_expr
              func: (member_access_expr
                accessor: (this_expr)
                member: (ident)))
            body: (expr_stmt
              (func_call_expr
                func: (ident)
                args: (func_call_args
                  (literal_name)))))
          (expr_stmt
            (func_call_expr
              func: (ident)))
          (if_stmt
            cond: (unary_op_expr
              op: (unary_op_not)
              right: (ident))
            body: (compound_stmt
              (expr_stmt
                (func_call_expr
                  func: (ident))))
            else: (if_stmt
              cond: (binary_op_expr
                left: (ident)
                op: (binary_op_neq)
                right: (ident))
              body: (compound_stmt
                (if_stmt
                  cond: (func_call_expr
                    func: (ident)
                    args: (func_call_args
                      (func_call_expr
                        func: (ident))
                      (member_access_expr
                        accessor: (this_expr)
                        member: (ident))))
                  body: (nop))
                (comment)
                (expr_stmt
                  (func_call_expr
                    func: (ident))))
              else: (compound_stmt
                (expr_stmt
                  (assign_op_expr
                    left: (ident)
                    op: (assign_op_sum)
                    right: (literal_int)))))))
        else: (if_stmt
          cond: (literal_bool)
          body: (compound_stmt
            (expr_stmt
              (assign_op_expr
                left: (ident)
                op: (assign_op_direct)
                right: (unary_op_expr
                  op: (unary_op_not)
                  right: (ident))))))))))




===================================================================================================
Conditionals - switch
===================================================================================================

function test() {
    switch ( action )
    {
        case CASE1:
        {
            func1();
        } break;
        case CASE2:
            i += 1;
            break;
        case CASE3:
        {
            func3();
        } break;
        case CASE4 :
        case CASE5:
            ;
        
        default :
            break;
    }
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
      (switch_stmt
        cond: (ident)
        body: (switch_block
          (switch_case_label
            value: (ident))
          (compound_stmt
            (expr_stmt
              (func_call_expr
                func: (ident))))
          (break_stmt)
          (switch_case_label
            value: (ident))
          (expr_stmt
            (assign_op_expr
              left: (ident)
              op: (assign_op_sum)
              right: (literal_int)))
          (break_stmt)
          (switch_case_label
            value: (ident))
          (compound_stmt
            (expr_stmt
              (func_call_expr
                func: (ident))))
          (break_stmt)
          (switch_case_label
            value: (ident))
          (switch_case_label
            value: (ident))
          (nop)
          (switch_default_label)
          (break_stmt))))))




===================================================================================================
Loops
===================================================================================================

function test() {
    while(true) {
      if(something) {
        break;
      }
    }

    while(read_whitespace() > 0);

    do 
    {
      something();
    } while(cond);

    for(i = 0; i < arr.Size(); i+=1) {
      loop();
    }

    for(;false;) break;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
      (while_stmt
        cond: (literal_bool)
        body: (compound_stmt
          (if_stmt
            cond: (ident)
            body: (compound_stmt
              (break_stmt)))))
      (while_stmt
        cond: (binary_op_expr
          left: (func_call_expr
            func: (ident))
          op: (binary_op_gt)
          right: (literal_int))
        body: (nop))
      (do_while_stmt
        body: (compound_stmt
          (expr_stmt
            (func_call_expr
              func: (ident))))
        cond: (ident))
      (nop)
      (for_stmt
        init: (assign_op_expr
          left: (ident)
          op: (assign_op_direct)
          right: (literal_int))
        cond: (binary_op_expr
          left: (ident)
          op: (binary_op_lt)
          right: (func_call_expr
            func: (member_access_expr
              accessor: (ident)
              member: (ident))))
        iter: (assign_op_expr
          left: (ident)
          op: (assign_op_sum)
          right: (literal_int))
        body: (compound_stmt
          (expr_stmt
            (func_call_expr
              func: (ident)))))
      (for_stmt
        cond: (literal_bool)
        body: (break_stmt)))))