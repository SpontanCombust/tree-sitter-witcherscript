===================================================================================================
Identifiers and objects
===================================================================================================

function test() {
    myVar;
    var1;
    __asfs328afncaas1483aaaaaaaaazzzzzzzzz0000;
    null;
    this;
    super;
    parent;
    virtual_parent;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (ident))
        (expr_stmt
          (ident))
        (expr_stmt
          (ident))
        (expr_stmt
          (ident))
        (expr_stmt
          (this_expr))
        (expr_stmt
          (super_expr))
        (expr_stmt
          (parent_expr))
        (expr_stmt
          (virtual_parent_expr)))))





===================================================================================================
Unary operators
===================================================================================================

function test() {
    -a;
    !condition;
    ~number;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (unary_op_expr
            op: (unary_op_neg)
            right: (ident)))
        (expr_stmt
          (unary_op_expr
            op: (unary_op_not)
            right: (ident)))
        (expr_stmt
          (unary_op_expr
            op: (unary_op_bitnot)
            right: (ident))))))




===================================================================================================
Binary operators
===================================================================================================

function test() {
    a || b;
    a && b;
    a | b;
    a & b;
    a ^ b;
    a == b;
    a != b;
    a > b;
    a >= b;
    a < b;
    a <= b;
    a - b;
    a + b;
    a * b;
    a / b;
    a % b;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_or)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_and)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_bitor)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_bitand)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_bitxor)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_eq)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_neq)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_gt)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_ge)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_lt)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_le)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_diff)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_sum)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_mult)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_div)
            right: (ident)))
        (expr_stmt
          (binary_op_expr
            left: (ident)
            op: (binary_op_mod)
            right: (ident))))))





===================================================================================================
Assignment
===================================================================================================

function test() {
    a = "1";
    b += c;
    a -= b;
    a *= CONSTANT;
    a /= 2;
    a &= FLAG;
    a |= 0x00001111;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_direct)
            right: (literal_string)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_sum)
            right: (ident)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_diff)
            right: (ident)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_mult)
            right: (ident)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_div)
            right: (literal_int)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_bitand)
            right: (ident)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_bitor)
            right: (literal_hex))))))





===================================================================================================
Others
===================================================================================================

function test() {
    (a);
    (Type)val;
    (((a)(b)));
    arr[i];
    func(1, "a",, true);
    player1.inv;
    thePlayer.IsCiri(false);
    (Type)func(arg);
    isTrue ? true : getFalse();
    new Foo;
    new Bar in this;
    baz = new Baz in theGame;
    list1 = {{1.0, 2, 3}, {4, 5}};
    list2 = {};
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (nested_expr
            (ident)))
        (expr_stmt
          (cast_expr
            type: (ident)
            value: (ident)))
        (expr_stmt 
          (nested_expr 
            (nested_expr 
              (cast_expr 
                type: (ident)
                value: (nested_expr 
                  (ident)))))) 
        (expr_stmt 
          (array_expr 
            accessor: (ident)
            index: (ident)))
        (expr_stmt 
          (func_call_expr 
            func: (ident)
            args: (func_call_args
                (literal_int)
                (literal_string)
                (literal_bool))))
        (expr_stmt 
          (member_access_expr 
            accessor: (ident)
            member: (ident)))
        (expr_stmt 
          (func_call_expr
            func: (member_access_expr
              accessor: (ident)
              member: (ident))
            args: (func_call_args
                (literal_bool))))
        (expr_stmt 
          (cast_expr 
            type: (ident)
            value: (func_call_expr 
              func: (ident)
              args: (func_call_args
                (ident)))))
        (expr_stmt 
          (ternary_cond_expr 
            cond: (ident)
            conseq: (literal_bool)
            alt: (func_call_expr 
              func: (ident))))
        (expr_stmt
          (new_expr
            class: (ident)))
        (expr_stmt
          (new_expr
            class: (ident)
            lifetime_obj: (this_expr)))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_direct)
            right: (new_expr
              class: (ident)
              lifetime_obj: (ident))))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_direct)
            right: (array_init_expr
              (array_init_expr
                (literal_float)
                (literal_int)
                (literal_int))
              (array_init_expr
                (literal_int)
                (literal_int)))))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_direct)
            right: (array_init_expr))))))




===================================================================================================
Precedence
===================================================================================================

function test() {
    a.b = x + y * z && p / -q;
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (assign_op_expr
            left: (member_access_expr
              accessor: (ident)
              member: (ident))
            op: (assign_op_direct)
            right: (binary_op_expr
              left: (binary_op_expr
                left: (ident)
                op: (binary_op_sum)
                right: (binary_op_expr
                  left: (ident)
                  op: (binary_op_mult)
                  right: (ident)))
              op: (binary_op_and)
              right: (binary_op_expr
                left: (ident)
                op: (binary_op_div)
                right: (unary_op_expr
                  op: (unary_op_neg)
                  right: (ident)))))))))




===================================================================================================
Real examples
===================================================================================================

function test() {
    ((CMovingPhysicalAgentComponent)((CNewNPC)results[i]).GetMovingAgentComponent()).SetAnimatedMovement( false );

    l_flashArray = GetModuleFlashValueStorage()().CreateTempFlashArray();
}

---------------------------------------------------------------------------------------------------

(script
  (func_decl
    name: (ident)
    params: (func_params)
    definition: (func_def
        (expr_stmt
          (func_call_expr
            func: (member_access_expr
              accessor: (nested_expr
                (cast_expr
                  type: (ident)
                  value: (func_call_expr
                    func: (member_access_expr
                      accessor: (nested_expr
                        (cast_expr
                          type: (ident)
                          value: (array_expr
                            accessor: (ident)
                            index: (ident))))
                      member: (ident)))))
              member: (ident))
            args: (func_call_args
              (literal_bool))))
        (expr_stmt
          (assign_op_expr
            left: (ident)
            op: (assign_op_direct)
            right: (func_call_expr
              func: (member_access_expr
                accessor: (func_call_expr
                  func: (func_call_expr
                    func: (ident)))
                member: (ident))))))))
                